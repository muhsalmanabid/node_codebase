const restify = require('restify');
const project = require('../../package.json');
const wrapper = require('../helpers/utils/wrapper');
const helmet = require('helmet');
const logger = require('../helpers/utils/logger');
const mongoConnection = require('../helpers/database/mongo/connection');
const { userV1Routes } = require('./routes/user');

class AppServer {
  constructor() {
    this.server = restify.createServer({
      name: `${project.name}-server`,
      version: project.version
    });

    this.server.server.setTimeout(600000);
    this.server.use(restify.plugins.acceptParser(this.server.acceptable));
    this.server.use(restify.plugins.queryParser());
    this.server.use(restify.plugins.bodyParser());
    this.server.use(restify.plugins.authorizationParser());

    this.server.use(
      helmet.frameguard()
    );

    // Global error handler
    this.server.on('restifyError', (req, res, err, callback) => {
      logger.log('error', err);
      return callback();
    });

    //health check server <3
    this.server.get('/api/health-check', (req, res, next) => {
      logger.log('info', 'health check success');
      wrapper.response(res, 'success', wrapper.data('Index'), 'This service is running properly');
    });
    this.server.get('/health-check', (req, res, next) => {
      logger.log('info', 'health check success');
      wrapper.response(res, 'success', wrapper.data('Index'), 'This service is running properly');
    });

    userV1Routes(this.server);

    const initiation = async () => {
      logger.log('info', 'Initiating server');
      await mongoConnection.init();
    };

    const shutdown = async () => {
      await mongoConnection.closeConnection();
      process.exit(0);
    };

    initiation();

    process.on('exit', () => {
      this.server.close(async () => {
        shutdown();
      });
    });

    process.on('SIGINT', () => {
      // Generated by clicking<Ctrl>+C in the terminal.
      this.server.close(async () => {
        shutdown();
      });
    });

    process.on('SIGUSR1', () => {
      this.server.close(async () => {
        shutdown();
      });
    });

    process.on('SIGTERM', () => {
      this.server.close(async () => {
        shutdown();
      });
    });

  }
}

module.exports = AppServer;